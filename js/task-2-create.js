// 1. Создаем переменную. В пузатых скобках указываем название тега, который хотим создать.
/*
const li = document.createElement('li');

// 2. Обратиться к тому элементу, в который мы хотим разместить эту нашу созданную li
// append - означает что мы чтото расширяем
// append предлагает разместить коллекцию элементовю. Т.е. за одну операцию append мы можем
// разментить несколько элементов

const list = document.querySelector('.js-products');

list.append(li);

// 3. Eсли мы хотим на созданную ли повесить какой-то класс, то, обращаемися к этой li,
// обращаемся на ней к свойству classList и там нам будут доступны несколько иметодов

li.classList.add('js-item');

// classList.toggle() - Это специфический переключатель, например, для ДНЕВНАЯ/НОЧНАЯ тема на сайте.
// Например, есть ползунок на сайте, по клику на нем меняетсмя тема, применяется метод toggle
// Также, ДЛЯ МОДАЛКИ тоже может использоваться

// Также можно добавлять ИНЛАЙНОВЫЕ СТИЛИ. Хотя, это и есть не очень хорошей практикой. Во-первых, потому что
// их не получится корректно убирать, во-вторых, каждый раз идет обращение к элементу, что тоже не очень хорошо.
// Для  этого обратиться через сво - во style. Это иногда может быть применимо для одного кмкого-то простого действия,
// например для валидации на инпуте - когда вводят пароль, а он не содержит достаточного количества символов и рамочка(бордер) красная

// КАК ДОБАВИТЬ ЗНАЧЕНИЕ?
// Помним, что HTML- эементы делятся на текстовые и можно сказать - динамические или элементы ввода. Например, input, а также
// элементы типа select, чтобы пользователь что - то выбрал, nmfr;t text-aria

// Для ВСЕХ ТЕКСТОВЫХ элементов - их контент находится в свойстве textСontent

li.textContent = 'Это контент элемента li';

// Для ВСЕХ ЭЛЕМЕНТОВ ВВОДА контент передается через свойство value
// Т.е. тут нашли инпут и сказали, что сейчас он будет принимать значение value

const input = document.querySelector('input');

input.value = "Текст для инпута";

*/

// ГОРАЗДО БОЛЕЕ удобный и современный МЕТОД ШАБЛОННОЙ СТРОКИ

// Т.е. мы сразу создаем строку с подобным  HTML-синтаксисом. Т.е. полностью со всеми нужными классами. 
// Но в этом случае мы будем такую разметку по - другому помещать в DOM

const li2 = '<li class = "js-item">Более современный способ создания  элемента</li>'

// Мы также обращаемся к ul, т.е. list
const list = document.querySelector('.js-products');

list.insertAdjacentHTML("beforeend", li2)// 1ое это позиция, куда надо поместить, 2-ое что мы хотим туда передать.


// Есть еще один вариант добавить - через inner HTML.
// С ним нужно быть осторожным, т.к.  он заменяет то, что было в коде на это новое. Но иногда это бывает необходимою Например,
// в интернет магазине. Например, мы идем через пагинацию, т.е. нам нужно не добавить элемент на страницу, а перерисовать его.

            // insertAdjacentHTML - добавляет , а inner HTML - перезаписывает

            